// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// serverInitDualAveragingCpp
List serverInitDualAveragingCpp(List config);
RcppExport SEXP _FederatedLearning_serverInitDualAveragingCpp(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(serverInitDualAveragingCpp(config));
    return rcpp_result_gen;
END_RCPP
}
// clientUpdateDualAveragingCpp
List clientUpdateDualAveragingCpp(List& clientData, List& serverBroadcast, List& config);
RcppExport SEXP _FederatedLearning_clientUpdateDualAveragingCpp(SEXP clientDataSEXP, SEXP serverBroadcastSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type clientData(clientDataSEXP);
    Rcpp::traits::input_parameter< List& >::type serverBroadcast(serverBroadcastSEXP);
    Rcpp::traits::input_parameter< List& >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(clientUpdateDualAveragingCpp(clientData, serverBroadcast, config));
    return rcpp_result_gen;
END_RCPP
}
// serverRoundDualAveragingCpp
List serverRoundDualAveragingCpp(List& serverState, List& clientReports, List& config);
RcppExport SEXP _FederatedLearning_serverRoundDualAveragingCpp(SEXP serverStateSEXP, SEXP clientReportsSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type serverState(serverStateSEXP);
    Rcpp::traits::input_parameter< List& >::type clientReports(clientReportsSEXP);
    Rcpp::traits::input_parameter< List& >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(serverRoundDualAveragingCpp(serverState, clientReports, config));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FederatedLearning_serverInitDualAveragingCpp", (DL_FUNC) &_FederatedLearning_serverInitDualAveragingCpp, 1},
    {"_FederatedLearning_clientUpdateDualAveragingCpp", (DL_FUNC) &_FederatedLearning_clientUpdateDualAveragingCpp, 3},
    {"_FederatedLearning_serverRoundDualAveragingCpp", (DL_FUNC) &_FederatedLearning_serverRoundDualAveragingCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FederatedLearning(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
